import React, { createContext, useContext, useState } from 'react';
import { ImageData, MarkerData } from '../types';

type MarkerContextType = {
  markers: MarkerData[];
  addMarker: (marker: MarkerData) => void;
  updateMarker: (id: string, updatedFields: Partial<MarkerData>) => void;
  images: ImageData[];
  addImage: (uri: string) => string;
  removeImage: (imageId: string) => void;
};

const MarkerContext = createContext<MarkerContextType | undefined>(undefined);

export const MarkerProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [markers, setMarkers] = useState<MarkerData[]>([]);
  const [images, setImages] = useState<ImageData[]>([]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞
  const addMarker = (marker: MarkerData) => {
    console.log('üß© –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç:', marker); //–æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥, —É–¥–∞–ª–∏—Ç—å
    setMarkers((prev) => [...prev, marker]);
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ id
  const updateMarker = (id: string, updatedFields: Partial<MarkerData>) => {
    setMarkers((prev) =>
      prev.map((marker) =>
        marker.id === id ? { ...marker, ...updatedFields } : marker
      )
    );
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –µ–≥–æ id
  const addImage = (uri: string): string => {
    const newImage: ImageData = {
      id: Date.now().toString(),
      uri,
    };
    setImages(prev => [...prev, newImage]);
    return newImage.id;
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const removeImage = (imageId: string) => {
    setImages((prev) => prev.filter((img) => img.id !== imageId));
  };

  return (
    <MarkerContext.Provider value={{ markers, addMarker, updateMarker, images, addImage, removeImage }}>
      {children}
    </MarkerContext.Provider>
  );
};

export const useMarkers = () => {
  const context = useContext(MarkerContext);
  if (!context) throw new Error('useMarkers must be used within MarkerProvider');
  return context;
};