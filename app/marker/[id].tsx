import * as ImagePicker from 'expo-image-picker';
import { useLocalSearchParams, useRouter } from 'expo-router';
import { Alert, Button, FlatList, Image, StyleSheet, Text, TouchableOpacity, View } from 'react-native';
import { useMarkers } from '../../context/MarkerContext';
import { ImageData } from '../../types';

export default function MarkerDetailScreen() {
    const { id } = useLocalSearchParams<{ id: string }>();
    const router = useRouter();
    const { markers, updateMarker, images, addImage, removeImage } = useMarkers();

    console.log("üîç –ü–æ–ª—É—á–µ–Ω–Ω—ã–π id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:", id);
    console.log("üìç –°–ø–∏—Å–æ–∫ –º–∞—Ä–∫–µ—Ä–æ–≤:", markers);

    const marker = markers.find((m) => m.id === id);
    console.log("‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä:", marker);

    if (!marker) {
        return (
            <View style={styles.container}>
                <Text>–ú–∞—Ä–∫–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</Text>
                <Button title="–ù–∞–∑–∞–¥" onPress={() => router.back()} />
            </View>
        );
    }

    // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–æ–º—É –º–∞—Ä–∫–µ—Ä—É
    const markerImages = (marker.imageIds || [])
        .map((id) => images.find((img) => img.id === id))
        .filter((img): img is ImageData => img !== undefined);

    // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const pickImage = async () => {
        try {
            const result = await ImagePicker.launchImageLibraryAsync({
                mediaTypes: ImagePicker.MediaTypeOptions.Images,
                allowsEditing: true,
                quality: 1,
            });

            if (!result.canceled && result.assets.length > 0) {
                const uri = result.assets[0].uri;
                // —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
                const imageId = addImage(uri);
                // –¥–æ–±–∞–≤–ª—è–µ–º imageId –≤ —Ç–µ–∫—É—â–∏–π –º–∞—Ä–∫–µ—Ä
                updateMarker(marker.id, {
                    imageIds: [...(marker.imageIds || []), imageId],
                });
            }
        } catch (error) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
    };
    
    // –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–∞
    const deleteImage = (imageId: string) => {
        Alert.alert(
            "–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
            [
                {
                    text: "–û—Ç–º–µ–Ω–∞",
                    style: "cancel",
                },
                {
                    text: "–£–¥–∞–ª–∏—Ç—å",
                    style: "destructive",
                    onPress: () => {
                        removeImage(imageId);
                        updateMarker(marker.id, {
                            imageIds: marker.imageIds.filter((id) => id !== imageId),
                        });
                    },
                },
            ]
        );
    };

    return (
        <View style={styles.container}>
            <Text style={styles.title}>–ú–∞—Ä–∫–µ—Ä ID: {id}</Text>
            <Text>–®–∏—Ä–æ—Ç–∞: {marker.latitude}</Text>
            <Text>–î–æ–ª–≥–æ—Ç–∞: {marker.longitude}</Text>
            <Button title="–î–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" onPress={pickImage} />
            <FlatList
                data={markerImages}
                keyExtractor={(item) => item.id}
                renderItem={({ item }) => (
                    <TouchableOpacity onLongPress={() => deleteImage(item.id)}>
                        <Image source={{ uri: item.uri }} style={styles.image} />
                    </TouchableOpacity>
                )
                }
                horizontal
                showsHorizontalScrollIndicator={false}
            />
            <Button title="–ù–∞–∑–∞–¥ –∫ –∫–∞—Ä—Ç–µ" onPress={() => router.back()} />
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        padding: 24,
        justifyContent: 'center',
        alignItems: 'center',
        gap: 16,
    },
    title: {
        fontSize: 20,
        fontWeight: 'bold',
    },
    image: {
        width: 100,
        height: 100,
        marginRight: 10,
        borderRadius: 10,
    },
});